name: Rust

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  EXECUTABLE_NAME: "linux-terminal-buddy"

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Extract version from Cargo.toml
      id: extract_version
      run: |
        version=$(grep '^version =' Cargo.toml | sed 's/version = \"//;s/\"//')
        echo "version=$version" >> $GITHUB_OUTPUT

  build-linux-x86_64:
    runs-on: ubuntu-latest

    env:
      IDENTIFIER: "x86_64-Linux"

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Run tests
      run: cargo test --release --verbose

    - name: Run build
      run: cargo build --release --verbose

    - name: Create release artifact
      run: |
        cp target/release/${{ env.EXECUTABLE_NAME }} ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}
        path: ./${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}
  
  build-linux-aarch64:
    runs-on: ubuntu-latest

    env:
      IDENTIFIER: "aarch64-Linux"
      TARGET_COMPILER: "aarch64-unknown-linux-gnu"
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
  
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Download cross compiler
      run: rustup target add ${{ env.TARGET_COMPILER }}

    - name: Install build dependencies
      run: sudo apt install gcc-aarch64-linux-gnu -y

    - name: Setup vendored openssl
      run: cargo add openssl -F vendored

    - name: Run build
      run: cargo build --release --target ${{ env.TARGET_COMPILER }} --verbose
    
    - name: Create release artifact
      run: |
        cp target/${{ env.TARGET_COMPILER }}/release/${{ env.EXECUTABLE_NAME }} ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}
        path: ./${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}

  build-linux-x86_64-musl:
    runs-on: ubuntu-latest

    env:
      IDENTIFIER: "x86_64-Linux-musl"
      TARGET_COMPILER: "x86_64-unknown-linux-musl"
  
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Download cross compiler
      run: rustup target add ${{ env.TARGET_COMPILER }}

    - name: Install build dependencies
      run: sudo apt install musl-tools -y

    - name: Setup vendored openssl
      run: cargo add openssl -F vendored

    - name: Run build
      run: cargo build --release --target ${{ env.TARGET_COMPILER }} --verbose
    
    - name: Create release artifact
      run: |
        cp target/${{ env.TARGET_COMPILER }}/release/${{ env.EXECUTABLE_NAME }} ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}
        path: ./${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}

  build-windows-x86_64:
    runs-on: windows-latest

    env:
      IDENTIFIER: "x86_64-Windows"
  
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Run tests
      run: cargo test --release --verbose

    - name: Run build
      run: cargo build --release --verbose
    
    - name: Create release artifact
      run: |
        cp target/release/${{ env.EXECUTABLE_NAME }}.exe ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}.exe
        path: ./${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}.exe

  build-windows-aarch64:
    runs-on: windows-latest

    env:
      IDENTIFIER: "aarch64-Windows"
      TARGET_COMPILER: "aarch64-pc-windows-msvc"
  
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Download cross compiler
      run: rustup target add ${{ env.TARGET_COMPILER }}

    - name: Run build
      run: cargo build --release --target ${{ env.TARGET_COMPILER }} --verbose
    
    - name: Create release artifact
      run: |
        cp target/${{ env.TARGET_COMPILER }}/release/${{ env.EXECUTABLE_NAME }}.exe ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}.exe
        path: ./${{ env.EXECUTABLE_NAME }}-${{ env.IDENTIFIER }}.exe

  release:
    runs-on: ubuntu-latest
    needs:
      - extract-version
      - build-linux-x86_64
      - build-linux-aarch64
      - build-linux-x86_64-musl
      - build-windows-x86_64
      - build-windows-aarch64

    env:
      EXTRACTED_VERSION: ${{ needs.extract-version.outputs.version }}
      ARTIFACTS_DIR: "downloaded-artifacts/"
      LINUX_AMD64_PATH: ""
      LINUX_AMD64_MUSL_PATH: ""
      LINUX_AARCH64_PATH: ""
      WINDOWS_AMD64_PATH: ""
      WINDOWS_AARCH64_PATH: ""
    
    steps:
    - uses: actions/checkout@v4

    - name: Set computed environment variables
      run: |
        echo "LINUX_AMD64_PATH=${EXECUTABLE_NAME}-x86_64-Linux" >> $GITHUB_ENV
        echo "LINUX_AMD64_MUSL_PATH=${EXECUTABLE_NAME}-x86_64-Linux-musl" >> $GITHUB_ENV
        echo "LINUX_AARCH64_PATH=${EXECUTABLE_NAME}-aarch64-Linux" >> $GITHUB_ENV
        echo "WINDOWS_AMD64_PATH=${EXECUTABLE_NAME}-x86_64-Windows.exe" >> $GITHUB_ENV
        echo "WINDOWS_AARCH64_PATH=${EXECUTABLE_NAME}-aarch64-Windows.exe" >> $GITHUB_ENV

    - name: Install github CLI
      run: sudo apt install gh -y
    
    - name: Download Linux x86_64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.LINUX_AMD64_PATH }}
        path: ${{ env.ARTIFACTS_DIR }}

    - name: Download Linux Musl x86_64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.LINUX_AMD64_MUSL_PATH }}
        path: ${{ env.ARTIFACTS_DIR }}

    - name: Download Linux aarch64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.LINUX_AARCH64_PATH }}
        path: ${{ env.ARTIFACTS_DIR }}
    
    - name: Download Windows x86_64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.WINDOWS_AMD64_PATH }}
        path: ${{ env.ARTIFACTS_DIR }}

    - name: Download Windows aarch64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.WINDOWS_AARCH64_PATH }}
        path: ${{ env.ARTIFACTS_DIR }}
    
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch commit history since the last tag
        # RELEASE_NOTES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %h %s (%an)")

        # Alternative: Fetch merged PRs if using GitHub CLI
        RELEASE_NOTES=$(gh api repos/:owner/:repo/pulls --jq '.[] | select(.merged_at != null) | "- #\(.number) \(.title) (@\(.user.login))"')

        gh release create $EXTRACTED_VERSION \
          ${{ env.ARTIFACTS_DIR }}${{ env.LINUX_AMD64_PATH }} \
          ${{ env.ARTIFACTS_DIR }}${{ env.LINUX_AARCH64_PATH }} \
          ${{ env.ARTIFACTS_DIR }}${{ env.WINDOWS_AMD64_PATH }} \
          ${{ env.ARTIFACTS_DIR }}${{ env.WINDOWS_AARCH64_PATH }} \
          --title "Release $EXTRACTED_VERSION" \
          --notes "Automated release of version $EXTRACTED_VERSION.

        Changes included in this release:
        $RELEASE_NOTES"
